{"version":3,"file":"static/js/874.7105f254.chunk.js","mappings":"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","sources":["pages/BasinWise.jsx"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport { Helmet } from 'react-helmet';\nimport { MapContainer, useMap, ScaleControl, LayersControl, Marker, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport BaseMap from '../components/BaseMap';\nimport { NavLink } from \"react-router-dom\";\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { DamList } from \"../data/Dams\";\nimport MarkerIcon from '../assets/images/marker-icon.png'\nimport { setInitialMapZoom, setDragging } from \"../utilities/Functions\";\nimport * as L from \"leaflet\";\n\n\nconst myIcon = new L.Icon({\n    iconUrl: MarkerIcon,\n    iconRetinaUrl: MarkerIcon,\n    popupAnchor: [0, -5],\n    iconSize: [15],\n});\n\n\nconst BasinWise = () => {\n    const [selected, setSelected] = useState();\n\n    function handleItemClick(index) {\n        setSelected(index);\n    }\n    const [getBasin] = useState([]);\n    const [getBasinDam, setState] = useState([]);\n\n\n    const basin = [...new Set(DamList.map((item) => item.RiverBasin))];\n    // console.log(basin);\n\n    const handleState = (event, value) => {\n        let dams = DamList.filter((dam) => dam.RiverBasin === value);\n        dams = [...new Set(dams.map((item) => item))];\n        dams.sort();\n\n        setState(dams);\n    };\n\n    // console.log(getBasinDam)\n\n    const ListMarkers = ({ onItemClick }) => {\n        return (\n            <>\n                <ul>\n                    {getBasinDam.map((Dam, index) => (\n                        <li\n                            className=\"dam-list-item\"\n                            key={index}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                onItemClick(index);\n                            }}\n                        >\n                            <div className=\"dam-item\">\n                                <p className=\"dam-name\">{Dam.Name}</p>\n                                <p className=\"dam-address\"> {Dam.Address}</p>\n\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            </>\n\n        );\n    };\n\n    const PointMarker = ({ center, content, openPopup }) => {\n        const map = useMap();\n        const markerRef = useRef(null);\n\n        useEffect(() => {\n            if (openPopup) {\n                // map.flyToBounds([center]);\n                map.flyTo(center, 14, {\n                    duration: 3\n                });\n                markerRef.current.openPopup();\n            }\n        }, [map, center, openPopup]);\n\n        return (\n            // console.log(content)\n            <Marker ref={markerRef} position={center} icon={myIcon}>\n                <Popup>\n                    <div className='dam-list-popup'>\n                        <h4>{content.Name}</h4>\n                        <p> <strong>Address:</strong> {content.Address}</p>\n                        <p><strong>Coordinates: </strong>{content.Latitude}, {content.Longitude} </p>\n                        <p><strong>Height Above Lowest Foundation Level: </strong>{content.HaLF} m </p>\n                        <p><strong>Dam Length:</strong> {content.DamLength} m </p>\n                        <p><strong>Reservoir Area:</strong> {content.ReservoirArea}  m<sup>2</sup> </p>\n                        <p><strong>Gross Storage Capacity:</strong> {content.GrossStorageCapacity}  m<sup>3</sup> </p>\n                        <p><strong>Effective Storage Capacity:</strong> {content.EffectiveStorageCapacity}  m<sup>3</sup> </p>\n                        <a href={content.ReadMore} target=\"_blank\" rel=\"noreferrer\"><strong>Read More </strong></a>\n\n                    </div>\n\n                </Popup>\n\n            </Marker>\n        );\n    };\n    const MyMarkers = ({ selectedIndex }) => {\n        return getBasinDam.map((Dam, index) => (\n            <PointMarker\n                key={index}\n                content={Dam}\n                center={[Dam.Latitude, Dam.Longitude]}\n                openPopup={selectedIndex === index}\n            />\n        ));\n    };\n\n\n\n    return (\n        <>\n            <Helmet>\n                <title>Basin Wise Dams | GeoID</title>\n            </Helmet>\n            <div className=\"main-map\">\n\n                <div className=\"dam-list\">\n                    <div className=\"heading\">\n                        <h2>Indian Dams</h2>\n                        <button className=\"BackButton\"><NavLink to=\"/dams\">&laquo; Back</NavLink></button>\n                    </div>\n                    <div className=\"dam-search\">\n                        <Autocomplete\n                            onChange={(event, value) => handleState(event, value)}\n                            id=\"basin\"\n                            getOptionLabel={(basin) => `${basin}`}\n                            options={basin}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            className=\"search-list\"\n                            noOptionsText={\"No Available Data\"}\n                            renderOption={(props, basin) => (\n                                <Box component=\"li\" {...props} key={basin} value={getBasin}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {basin}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search Basin\" />}\n                        />\n\n                    </div>\n\n\n                    <ListMarkers onItemClick={handleItemClick} />\n\n                </div>\n\n                <div className=\"right-side\">\n                    <MapContainer\n                        fullscreenControl={true}\n                        center={[23, 84]}\n                        style={{ width: '100%', height: \"100%\" }}\n                        zoom={setInitialMapZoom()}\n                        // maxZoom={8}\n                        zoomDelta={0.5}\n                        zoomSnap={0}\n                        dragging={setDragging()}\n                        minZoom={3}\n                        // maxBounds={[[8, 98], [38, 68]]}\n                        scrollWheelZoom={true}>\n                        <ScaleControl position=\"bottomleft\" />\n                        <BaseMap />\n\n                        <MyMarkers selectedIndex={selected} />\n\n                    </MapContainer>\n\n                </div>\n\n            </div>\n        </>\n\n    )\n}\n\nexport default BasinWise"],"names":["myIcon","L","iconUrl","MarkerIcon","iconRetinaUrl","popupAnchor","iconSize","useState","selected","setSelected","getBasin","getBasinDam","setState","basin","Set","DamList","item","RiverBasin","ListMarkers","onItemClick","map","Dam","index","className","onClick","e","preventDefault","Name","Address","PointMarker","center","content","openPopup","useMap","markerRef","useRef","useEffect","flyTo","duration","current","ref","position","icon","Latitude","Longitude","HaLF","DamLength","ReservoirArea","GrossStorageCapacity","EffectiveStorageCapacity","href","ReadMore","target","rel","MyMarkers","selectedIndex","to","onChange","event","value","dams","dam","sort","handleState","id","getOptionLabel","options","isOptionEqualToValue","option","noOptionsText","renderOption","props","component","key","sx","fontSize","renderInput","params","label","fullscreenControl","style","width","height","zoom","setInitialMapZoom","zoomDelta","zoomSnap","dragging","setDragging","minZoom","scrollWheelZoom"],"sourceRoot":""}